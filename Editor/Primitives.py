"""
Primitives

Description:
"""
class Cube:
    vertices = (-1,-1,-1),(1,-1,-1),(1,1,-1),(-1,1,-1),(-1,-1,1),(1,-1,1),(1,1,1),(-1,1,1),(-1,1,1)
    faces = (0,1,2,3),(4,5,6,7),(0,1,5,4),(2,3,7,6),(0,3,7,4),(1,2,6,5)
    colors = (255,0,0),(255,128,0),(255,255,0),(255,255,255),(0,0,255),(0,255,0)
    
    def Translate(self, pos=(0,0,0)):
        x,y,z = pos     
        self.verts = [(x + X/2,y + Y/2,z + Z/2) for X,Y,Z in self.vertices]
    
    def __init__(self, pos=(0,0,0)):
        x,y,z = pos     
        self.Translate((x,y,z))
    
    def Collider(self, offset=(0,0,0)):
        return offset

"""
Custom Models:

Description: The following objects are imported OBJs
"""
class Hexagon_OBJ:
    
    vertices = (-1, 2, -2),(-2, 3, -1),(-1, 4, -2),(-2, 4, 0),(-1, 5, -1),(0, 5, -1),(0, 2, -2),(1, 4, -2),(1, 2, -2),(-1, 1, -2),(1, 1, -2),(0, 0, -1),(-2, 2, -1),(-1, 0, -1),(-2, 1, 0),(-2, 2, 0),(2, 3, -1),(1, 5, -1),(2, 4, 0),(0, 5, 0),(-1, 5, 1),(0, 5, 1),(-2, 3, 1),(-2, 2, 1),(-1, 2, 2),(-1, 0, 1),(0, 0, 0),(0, 0, 1),(1, 0, -1),(2, 2, -1),(2, 1, 0),(1, 2, 2),(2, 3, 1),(1, 4, 2),(1, 5, 1),(0, 2, 2),(-1, 4, 2),(1, 1, 2),(-1, 1, 2),(2, 2, 1),(1, 0, 1),(2, 2, 0),
    faces = (0, 1, 2),(3, 4, 1),(5, 2, 4),(1, 4, 2),(0, 2, 6),(5, 7, 2),(8, 6, 7),(2, 7, 6),(0, 6, 9),(8, 10, 6),(11, 9, 10),(6, 10, 9),(0, 9, 12),(11, 13, 9),(14, 12, 13),(9, 13, 12),(0, 12, 1),(14, 15, 12),(3, 1, 15),(12, 15, 1),(8, 7, 16),(5, 17, 7),(18, 16, 17),(7, 17, 16),(5, 4, 19),(3, 20, 4),(21, 19, 20),(4, 20, 19),(3, 15, 22),(14, 23, 15),(24, 22, 23),(15, 23, 22),(14, 13, 25),(11, 26, 13),(27, 25, 26),(13, 26, 25),(11, 10, 28),(8, 29, 10),(30, 28, 29),(10, 29, 28),(31, 32, 33),(18, 34, 32),(21, 33, 34),(32, 34, 33),(31, 33, 35),(21, 36, 33),(24, 35, 36),(33, 36, 35),(31, 35, 37),(24, 38, 35),(27, 37, 38),(35, 38, 37),(31, 37, 39),(27, 40, 37),(30, 39, 40),(37, 40, 39),(31, 39, 32),(30, 41, 39),(18, 32, 41),(39, 41, 32),(21, 34, 19),(18, 17, 34),(5, 19, 17),(34, 17, 19),(24, 36, 22),(21, 20, 36),(3, 22, 20),(36, 20, 22),(27, 38, 25),(24, 23, 38),(14, 25, 23),(38, 23, 25),(30, 40, 28),(27, 26, 40),(11, 28, 26),(40, 26, 28),(18, 41, 16),(30, 29, 41),(8, 16, 29),(41, 29, 16),
    colors = (0, 0, 0),(255, 0, 255),(0, 0, 0),(255, 0, 255),(0, 0, 0),(255, 0, 255),(0, 0, 0),(255, 0, 255),(0, 0, 0),(255, 0, 255),(0, 0, 0),(255, 0, 255),(0, 0, 0),(255, 0, 255),(0, 0, 0),(255, 0, 255),(0, 0, 0),(255, 0, 255),(0, 0, 0),(255, 0, 255),(0, 0, 0),(255, 0, 255),(0, 0, 0),(255, 0, 255),(0, 0, 0),(255, 0, 255),(0, 0, 0),(255, 0, 255),(0, 0, 0),(255, 0, 255),(0, 0, 0),(255, 0, 255),(0, 0, 0),(255, 0, 255),(0, 0, 0),(255, 0, 255),(0, 0, 0),(255, 0, 255),(0, 0, 0),(255, 0, 255),(0, 0, 0),(255, 0, 255),(0, 0, 0),(255, 0, 255),(0, 0, 0),(255, 0, 255),(0, 0, 0),(255, 0, 255),(0, 0, 0),(255, 0, 255),(0, 0, 0),(255, 0, 255),(0, 0, 0),(255, 0, 255),(0, 0, 0),(255, 0, 255),(0, 0, 0),(255, 0, 255),(0, 0, 0),(255, 0, 255),(0, 0, 0),(255, 0, 255),(0, 0, 0),(255, 0, 255),(0, 0, 0),(255, 0, 255),(0, 0, 0),(255, 0, 255),(0, 0, 0),(255, 0, 255),(0, 0, 0),(255, 0, 255),(0, 0, 0),(255, 0, 255),(0, 0, 0),(255, 0, 255),(0, 0, 0),(255, 0, 255),(0, 0, 0),(255, 0, 255)
    
    def Translate(self, pos=(0,0,0)):
        x,y,z = pos     
        self.verts = [(x + X/2,y + Y/2,z + Z/2) for X,Y,Z in self.vertices]
    
    def __init__(self, pos=(0,0,0)):
        x,y,z = pos     
        self.Translate((x,y,z))
    
    def Collider(self, offset=(0,0,0)):
        return offset

class Ground_OBJ:
    
    vertices = (-0.073999999999999996, -0.0, 27.5),(-47.073999999999998, 0.0, -27.5),(-0.073999999999999996, 0.0, -27.5),(-47.073999999999998, -0.0, 27.5),(-47.073999999999998, 1.0, 27.5),(-47.073999999999998, 1.0, -27.5),(-0.073999999999999996, 1.0, 27.5),(-0.073999999999999996, 1.0, -27.5)
    faces = (1, 2, 0, 3),(4, 5, 1, 3),(6, 4, 3, 0),(5, 7, 2, 1),(7, 6, 0, 2),(7, 5, 4, 6)
    colors = (255, 255, 255),(255, 255, 255),(255, 255, 255),(255, 255, 255),(255, 255, 255),(255, 255, 255)
    
    def Translate(self, pos=(0,0,0)):
        x,y,z = pos     
        self.verts = [(x + X/2,y + Y/2,z + Z/2) for X,Y,Z in self.vertices]
    
    def __init__(self, pos=(0,0,0)):
        x,y,z = pos     
        self.Translate((x,y,z))
    
    def Collider(self, offset=(0,0,0)):
        return offset
